What happens when you initialize a repository? Why do you need to do it?

 When you initialize a repository, it begins as an empty repository.  Running git
 status will reveal any files you have within that repository that has not been
 committed.  These files are "untracked files", meaning they have not been comitted.
 If you do not initialize a repository, you will not be able to commit any of its
 files to Github.





How is the staging area different from the working directory and the repository? What 
value do you think it offers?

 The staging area is different from the working directory and repository in that it is
 an intermediate step between the two.  In order to add files into a repository, you
 must first take it from the working directory and add it into the staging area.  Once
 the file is added into the staging area, it can then be committed.  The committed file
 now exists in the repository.
 This allows users to view all the files they would like to add into a single commit and
 helps clarify the logical change and purpose of the commit.
 



How can you use the staging area to make sure you have one commit per logical change?

 The staging area allows you to see which files you have modified and also what changes
 were introduced within those files.
 git diff  --> shows differences between working directory and staging area
 git diff --staged --> shows differences between staging area and repository
 git diff ID1 ID2 --> shows differences betwwen ID2 and ID1




What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?

 If I wanted to make different versions of an App, or make the app in the different languages,
 would help keep my version history organized.  Branches allow programmers to have different
 running versions of each file without affecting the others.




How do the diagrams help you visualize the branch structure?

 The branch structure diagram allows users to easily see which commits and parents each branch
 is connected to.  It displays reachability and also highlights which changes were made to
 which branch.






What is the result of merging two branches together? Why do we represent it in the 
diagram the way we do?

 Merging two branches together allows the new merged branch to acces the parents
 of both branches.  It can also be used to add all working updates from an
 experimental branch into a production branch.  The branches are represented in
 the diagram as different lines of nodes that represent commits, so that each 
 branch is easily traceable.  We can distinguish which commits are reachable from
 which branches.




What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges 
manually?

 Git's automatic merges make it easy for users to merge two branches that differ
 only in the newly added lines.  However, merging manually allows users to choose
 which line modifications to keep in the newly merged commit.




